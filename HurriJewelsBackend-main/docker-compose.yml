version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hurrijewels-postgres
    environment:
      POSTGRES_DB: hurrijewels
      POSTGRES_USER: hurrijewels
      POSTGRES_PASSWORD: hurrijewels123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - hurrijewels-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U hurrijewels -d hurrijewels" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and background jobs
  redis:
    image: redis:7-alpine
    container_name: hurrijewels-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - hurrijewels-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # NestJS Backend Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: hurrijewels-backend
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://hurrijewels:hurrijewels123@postgres:5432/hurrijewels?schema=public
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: your-super-secret-jwt-key-here
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-here
      AWS_ACCESS_KEY_ID: your-aws-access-key
      AWS_SECRET_ACCESS_KEY: your-aws-secret-key
      AWS_REGION: us-east-1
      AWS_S3_BUCKET: your-s3-bucket-name
      STRIPE_SECRET_KEY: your-stripe-secret-key
      STRIPE_WEBHOOK_SECRET: your-stripe-webhook-secret
      STRIPE_PUBLISHABLE_KEY: your-stripe-publishable-key
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_USER: your-email@gmail.com
      SMTP_PASS: your-app-password
      SMTP_FROM: noreply@hurrijewels.com
    ports:
      - "3000:3000"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./.env:/app/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hurrijewels-network
    command: npm run start:dev

  # Prisma Studio (Database GUI)
  prisma-studio:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: hurrijewels-prisma-studio
    environment:
      DATABASE_URL: postgresql://hurrijewels:hurrijewels123@postgres:5432/hurrijewels?schema=public
    ports:
      - "5555:5555"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - hurrijewels-network
    command: npx prisma studio --hostname 0.0.0.0 --port 5555

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  hurrijewels-network:
    driver: bridge
